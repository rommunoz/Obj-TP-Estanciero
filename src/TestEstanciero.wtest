//import Juego.*
import Jugador.*
import Provincia.*
import Propiedades.*
import Excepciones.*

describe "El Estanciero, Parte 1" {
	var coloniaCarolina
	var elZorzalito
	var lagunaPucuSur
	var coloniaPorvenir
	var losPinos	
	var corrientes
	var entreRios
	var tiaTiti
	var munoz
	var empresa1
	
	method initialize(){
		
		tiaTiti = new Jugador()
		munoz 	= new Jugador() 
		
		corrientes = new Provincia()
		entreRios  = new Provincia()
		
		coloniaCarolina = new Campo(provincia = corrientes, duenio = tiaTiti, costoDeEstancia = 600, valorDeRentaFijo = 200)
		elZorzalito 	= new Campo(provincia = corrientes, duenio = munoz,   costoDeEstancia = 900, valorDeRentaFijo = 270)
		lagunaPucuSur 	= new Campo(provincia = corrientes, costoDeEstancia = 1100, valorDeRentaFijo = 150) //duenio banco
		coloniaPorvenir = new Campo(provincia = corrientes, costoDeEstancia = 750, valorDeRentaFijo = 400) //duenio banco
		losPinos 		= new Campo(provincia = entreRios, duenio = tiaTiti, costoDeEstancia = 500, valorDeRentaFijo = 500)
		
		empresa1 = new Empresa()
		
		tiaTiti.camposJugador().add(coloniaCarolina)
		munoz.camposJugador().add(elZorzalito)
		
		corrientes.campos().add(coloniaCarolina)
		corrientes.campos().add(elZorzalito)
		corrientes.campos().add(lagunaPucuSur)
		corrientes.campos().add(coloniaPorvenir)
//		coloniaPorvenir = new Campo(costoDeConstruccionDeEstancia = 15000, provincia = corrientes, 
//				valorDeRentaFijo = 2250, precioDeCompraInicial = 50000) //duenio banco	
	}
	
	test "1- Dueños de una provincia sin repetidos, banco aparece una sola vez" {
		assert.equals(#{banco, tiaTiti, munoz}.size(), corrientes.dueniosDeCampos().size())
		assert.that(corrientes.dueniosDeCampos().contains(banco))
		assert.that(corrientes.dueniosDeCampos().contains(tiaTiti))
		assert.that(corrientes.dueniosDeCampos().contains(munoz))
	}
	
	test "1- Dueños sin repetidos, con version map" {
		assert.equals(#{banco, tiaTiti, munoz}.size(), corrientes.dueniosDeCamposV2().size())
		assert.that(corrientes.dueniosDeCampos().contains(banco))
		assert.that(corrientes.dueniosDeCampos().contains(tiaTiti))
		assert.that(corrientes.dueniosDeCampos().contains(munoz))
	}
	
	test "1-b- Se agrega una estancia en Los Pinos" {
		tiaTiti.cobrar(1000) //lavando guita
		losPinos.agregarUnaEstancia()
		assert.equals(1, losPinos.cantidadDeEstancias())
		assert.equals(500, tiaTiti.dinero())
	}
	
	test "1-b- No se agrega una estancia porque no es Monopolio" {
		assert.throwsExceptionLike(noMonopolio, {elZorzalito.agregarUnaEstancia()})
		assert.equals(0, elZorzalito.cantidadDeEstancias())
		assert.equals(0, munoz.dinero()) //esta seco tmb
	}
	
	test "1-b- No se agrega una estancia porque no le alcanza el dinero" {
		assert.throwsExceptionWithMessage(noLoPuedePagar.message(), {losPinos.agregarUnaEstancia()}) 
		assert.equals(0, losPinos.cantidadDeEstancias())
		assert.equals(0, tiaTiti.dinero()) //esta seco
	}
	
	test "2-a- Cada propiedad sabe responder si es empresa" {
		assert.notThat(losPinos.sosEmpresa()) 
		assert.that(empresa1.sosEmpresa())
	}
	
	test "2-b- Cantidad de empresas de la tia" {
		assert.equals(0, tiaTiti.cantidadDeEmpresas()) 
	}
	
	test "3- Tirar dados" {
		assert.that(munoz.tirarDados().isInteger())
	}
	/* 
	test "4- Renta para un jugador que cayo en un campo" {
		assert.equals(200, coloniaCarolina.rentaPara(munoz))
	}
	
	test "4- Renta para un jugador que cayo en su propio campo" {
		assert.equals(270, elZorzalito.rentaPara(munoz))
	}
	
	test "4- Renta para un jugador que cayo en una empresa" {
		assert.equals(180000, empresa1.rentaPara(munoz)) //en el caso que saque 2
	}
	*/
	test "5- El banco que tenia 10000 le da 5000 a un jugador"{
		banco.cobrar(10000)
		banco.pagarA(munoz, 5000)
		assert.equals(5000, banco.dinero())
		assert.equals(5000, munoz.dinero())
	}
	
}