//import Juego.*
import Jugador.*
import Provincia.*
import Propiedades.*
import Excepciones.*
import Casilleros.*
import Empresas.*
import Tablero.*
import Juego.*

describe "El Estanciero, Parte 1" {
	var coloniaCarolina
	var elZorzalito
	var lagunaPucuSur
	var coloniaPorvenir
	var losPinos	
	var corrientes
	var entreRios
	var tiaTiti
	var munoz
	
	var unJuego
	var miTablero
	
	method initialize(){
		
		tiaTiti = new Jugador()
		munoz 	= new Jugador() 
		
		corrientes = new Provincia()
		entreRios  = new Provincia()
		
		coloniaCarolina = new Campo(provincia = corrientes, duenio = tiaTiti, costoDeEstancia = 600, valorDeRentaFijo = 200, precioInicial = 6000)
		elZorzalito 	= new Campo(provincia = corrientes, duenio = munoz,   costoDeEstancia = 900, valorDeRentaFijo = 270, precioInicial = 7500)
		lagunaPucuSur 	= new Campo(provincia = corrientes, costoDeEstancia = 1100, valorDeRentaFijo = 150, precioInicial = 5000) //duenio banco
		coloniaPorvenir = new Campo(provincia = corrientes, costoDeEstancia = 750, valorDeRentaFijo = 400, precioInicial = 9000) //duenio banco
		losPinos 		= new Campo(provincia = entreRios, duenio = tiaTiti, costoDeEstancia = 500, valorDeRentaFijo = 500, precioInicial = 12000)
		
		tiaTiti.agregarPropiedad(coloniaCarolina)
		munoz.agregarPropiedad(elZorzalito)
		
		corrientes.agregarCampo(coloniaCarolina)
		corrientes.agregarCampo(elZorzalito)
		corrientes.agregarCampo(lagunaPucuSur)
		corrientes.agregarCampo(coloniaPorvenir)
//		coloniaPorvenir = new Campo(costoDeConstruccionDeEstancia = 15000, provincia = corrientes, 
//				valorDeRentaFijo = 2250, precioDeCompraInicial = 50000) //duenio banco	
		miTablero = new Tablero()
		miTablero.casilleros().addAll([coloniaCarolina, elZorzalito]) //, lagunaPucuSur, premioGanadero, coloniaPorvenir, losPinos]
		
		unJuego = new Juego(jugadores = [tiaTiti, munoz], tablero = miTablero)
	}
	
	test "1- Dueños de una provincia sin repetidos, banco aparece una sola vez" {
		assert.equals(#{banco, tiaTiti, munoz}.size(), corrientes.dueniosDeCampos().size())
		assert.that(corrientes.dueniosDeCampos().contains(banco))
		assert.that(corrientes.dueniosDeCampos().contains(tiaTiti))
		assert.that(corrientes.dueniosDeCampos().contains(munoz))
	}
	
	test "1- Dueños sin repetidos, con version map" {
		assert.equals(#{banco, tiaTiti, munoz}.size(), corrientes.dueniosDeCamposV2().size())
		assert.that(corrientes.dueniosDeCampos().contains(banco))
		assert.that(corrientes.dueniosDeCampos().contains(tiaTiti))
		assert.that(corrientes.dueniosDeCampos().contains(munoz))
	}
	/* 
	test "1-b- Se agrega una estancia en Los Pinos" {
		tiaTiti.cobrar(1000) //lavando guita
		losPinos.agregarUnaEstancia()
		assert.equals(1, losPinos.cantidadDeEstancias())
		assert.equals(500, tiaTiti.dinero())
	}
	
	test "1-b- No se agrega una estancia porque no es Monopolio" {
		assert.throwsExceptionLike(noMonopolio, {elZorzalito.agregarUnaEstancia()})
		assert.equals(0, elZorzalito.cantidadDeEstancias())
		assert.equals(0, munoz.dinero()) //esta seco tmb
	}
	
	test "1-b- No se agrega una estancia porque no le alcanza el dinero" {
		assert.throwsExceptionWithMessage(noLoPuedePagar.message(), {losPinos.agregarUnaEstancia()}) 
		assert.equals(0, losPinos.cantidadDeEstancias())
		assert.equals(0, tiaTiti.dinero()) //esta seco
	}
	
	test "2-a- Cada propiedad sabe responder si es empresa" {
		assert.notThat(losPinos.sosEmpresa()) 
		assert.that(empresa1.sosEmpresa())
	}
	
	test "2-b- Cantidad de empresas de la tia" {
		assert.equals(0, tiaTiti.cantidadDeEmpresas()) 
	}
	
	test "3- Tirar dados" {
		assert.that(munoz.tirarDados().isInteger())
		//assert.equals(10, munoz.tirarDados())
	}
	 
	test "4- Renta para un jugador que cayo en un campo" {
		assert.equals(200, coloniaCarolina.rentaPara(munoz))
	}
	
	test "4- Renta para un jugador que cayo en su propio campo" {
		assert.equals(270, elZorzalito.rentaPara(munoz))
	}
	
	test "4- Renta para un jugador que cayo en una empresa" {
		assert.that(empresa1.rentaPara(munoz).isInteger())
		assert.that(empresa1.rentaPara(munoz) >= 2 * 30000)
		assert.that(empresa1.rentaPara(munoz) <= 12 * 30000 * 3) //siendo 3 el nro max de empresas del juego
		//assert.equals(180000, empresa1.rentaPara(munoz)) //en el caso que saque 2
	}
	
	test "5- El banco cobra 10000 y le logra dar 5000 a un jugador"{
		banco.cobrar(10000)
		banco.pagarA(munoz, 5000)
		assert.equals(5000, banco.dinero())
		assert.equals(5000, munoz.dinero())
	}
	
	test "5- El jugador cobra 10000 y le logra dar 5000 al banco"{
		munoz.cobrar(10000)
		munoz.pagarA(banco, 5000)
		assert.equals(5000, munoz.dinero())
		assert.equals(5000, banco.dinero())
	}
	
	test "5- Lo mismo entre jugadores"{
		munoz.cobrar(10000)
		munoz.pagarA(tiaTiti, 5000)
		assert.equals(5000, munoz.dinero())
		assert.equals(5000, tiaTiti.dinero())
	}
	
	test "5- Rompe bien cuando el banco intenta darle 5000 a un jugador y no puede"{
		assert.throwsExceptionLike(noLoPuedePagar, {banco.pagarA(munoz, 5000)})
		assert.equals(0, banco.dinero())
		assert.equals(0, munoz.dinero())
	}
	
	test "5- Rompe bien cuando el jugador intenta darle 5000 al banco y no puede"{
		assert.throwsExceptionLike(noLoPuedePagar, {munoz.pagarA(banco, 5000)})
		assert.equals(0, banco.dinero())
		assert.equals(0, munoz.dinero())
	}
	
	test "6- El jugador cobra 5000 por pasar por la salida" {
		salida.paso(munoz)
		assert.equals(5000, munoz.dinero())
	}
	
	test "6- No pasa nada al pasar por casilleros que sean propiedades o premios" {
		elZorzalito.paso(munoz)
		premioGanadero.paso(munoz)
		assert.equals(00, munoz.dinero())
	}
	
	test "7- Munoz cae en lagunaPucuSur, cuyo duenio es el banco, entonces la debe comprar, lo logra porque se le dio 5000 " {
		munoz.cobrar(5000)
		lagunaPucuSur.cayo(munoz)
		assert.equals(0, munoz.dinero())
		assert.equals(true, munoz.propiedades().contains(lagunaPucuSur))
		assert.equals(false, banco.propiedades().contains(lagunaPucuSur))
	}
	
	test "7- Munoz cae en su propio Zorzalito y no pasa nada" {
		elZorzalito.cayo(munoz)
		assert.equals(0, munoz.dinero())
	}
	
	test "7- Munoz cae en coloniaCarolina y no puede pagar la renta" {
		assert.throwsExceptionLike(noLoPuedePagar, {coloniaCarolina.cayo(munoz)})
	}
	
	
	test "7- Munoz cae en coloniaCarolina y paga la renta" {
		munoz.cobrar(5000)
		coloniaCarolina.cayo(munoz)
		assert.equals(4800, munoz.dinero())
		assert.equals(200, tiaTiti.dinero())
	}
	
	test "7- Munoz cobra premioGanadero por caer en el mismo" {
		premioGanadero.cayo(munoz)
		assert.equals(2500, munoz.dinero())
	}
	
	test "7- Munoz cae en la salida y no pasa nada" {
		salida.cayo(munoz)
		assert.equals(0, munoz.dinero())
	}

	test "8- Titi se mueve sobre la salida(cobra 5000) y cae en su propio campo(no paga nada)" {
		tiaTiti.moverseSobre([lagunaPucuSur, salida, coloniaCarolina])
		assert.equals(5000, tiaTiti.dinero())
		assert.equals(coloniaCarolina, tiaTiti.casilleroActual())
	}
	
	test "8- Titi se mueve sobre un solo casillero y realiza la accion para el casillero donde cayo" {
		tiaTiti.cobrar(2000)
		tiaTiti.moverseSobre([elZorzalito])
		assert.equals(1730, tiaTiti.dinero())
		assert.equals(elZorzalito, tiaTiti.casilleroActual())
	} */
	/*
	test "9- Hacemos que titi juegue 1 turno desde la salida" {
		unJuego.queJuegue(tiaTiti)
		assert.equals(5000, tiaTiti.dinero())
		assert.equals(elZorzalito, tiaTiti.casilleroActual())
	}
	
	test "9- Hacemos que titi avance sobre 3 casilleros desde la salida" {
		miTablero.casilleros().add(premioGanadero)
		//en las siguientes 3 lineas uso la lógica con la que el jugador juega solo para fijar el valor de los dados
		const unNumero = 3
		const casilleros = miTablero.casillerosDesdeHasta(tiaTiti.casilleroActual(), unNumero)
		tiaTiti.moverseSobre(casilleros)
		assert.equals(2500, tiaTiti.dinero())
		assert.equals(premioGanadero, tiaTiti.casilleroActual())
	}
	 
	test "9- Hacemos que titi avance sobre 4 casilleros desde la salida, vuelve a caer en la salida" {
		miTablero.casilleros().add(premioGanadero) 
		const unNumero = 4
		const casilleros = miTablero.casillerosDesdeHasta(tiaTiti.casilleroActual(), unNumero)
		tiaTiti.moverseSobre(casilleros)
		assert.equals(5000, tiaTiti.dinero())
		assert.equals(salida, tiaTiti.casilleroActual())
	}
	*/
	
	test "9- Ext" {
		tiaTiti.cobrar(10000)
		tiaTiti.marchePreso()
		tiaTiti.caerEn(prision)
		
		//assert.equals(0, tiaTiti.dinero())
		assert.equals(prision, tiaTiti.casilleroActual())
		unJuego.queJuegue(tiaTiti)
		assert.equals(prision, tiaTiti.casilleroActual())
		unJuego.queJuegue(tiaTiti)
		assert.equals(prision, tiaTiti.casilleroActual())
		unJuego.queJuegue(tiaTiti)
		assert.equals(prision, tiaTiti.casilleroActual())
		unJuego.queJuegue(tiaTiti)
		assert.equals(prision, tiaTiti.casilleroActual())
	}
	
}